#include <iostream>
#include <string>

using namespace std;
/*31. 函数的声明和定义

返回值的数据类型 函数名（参数1，参数2...）
{

    return 返回值
}

函数的声明：让编译器知道函数的存在，包括返回值的数据类型、函数名和参数列表。
函数的定义：函数的实现过程。
注意：

- 函数的声明和定义可以书写在一起，也可以分开，如果书写在一起，一般放在main函数的上面，如果分开，一般在main函数的上面声明，在main函数的下面定义。
- 如果函数的声明和定义分开书写，函数的声明后面一定要有分号，函数的定义后面一定不能写分号。
- 在同一个程序中，函数只需要声明和定义一次，也可以多次声明，但只能定义一次。
- 函数的声明必须在函数定义前
*/

// 函数定义

int max(int a, int b) // 函数定义后面不能加分号。
{
    if (a > b)
        return a;

    return b;
}

/* 32 函数的调用
注意：
- 如果函数用于表达式中，返回值的数据类型要匹配（否则可能会被隐式转换或编译错误）。
- 如果函数有返回值，可以不关心它，忽略它。
- 	调用函数的时候，参数列表必须与函数的声明一致（参数的个数、书写的顺序和数据类型）。
*/

/*33 变量的作用域
作用域是指程序中变量生效（accessible） 的区域， 超过该区域的变量不能被访问。
作用域分为两种：
全局变量在整个程序中都可以访问，局部变量只能在函数或语句块的内部才能访问。

C++中定义变量的场景主要有五种：
1）在全部函数外面定义的是全局变量。
    在整个程序生命周期内都是有效的，在定义位置之后的任意函数中都能访问。
    全局变量在主程序退出时由系统收回内存空间。
    全局变量放在所有函数的前面，如果放在了函数中间，则在变量声明前的函数则无法访问

2）在头文件中定义的是全局变量。
    后期学习
3）在函数和语句块内部定义的是局部变量。
    在函数或语句块内部的语句使用，在函数或语句块外部是不可用的。
    主要是大括号里面的，都是语句块
    局部变量在函数返回或语句块结束时由系统收回内存空间。



4）函数的参数是该函数的局部变量。



5）函数内部用static修饰的是静态局部变量。
    用static修饰的局部变量生命周期和程序相同，并且只会被初始化一次。
    其作用域为局部，当定义它的函数或语句块结束时，其作用域随之结束。
    当程序想要使用全局变量的时候应该先考虑使用static（考虑到数据安全性）。
    原因是全局变量所有的函数都可以访问，静态变量只有在定义他的函数里面才可以访问。


注意：
-	局部变量和全局变量的名称可以相同，在某函数或语句块内部，如果局部变量名与全局变量名相同，就会屏蔽全局变量而使用局部变量，如果想使用全局变量，可以在变量名前加两个冒号（::）。
-	for循环初始化语句中定义的变量的作用域是for语句块。

*/

int aa;

void test32_1()
{
    cout << "test32_1 = " << ++aa << endl; // 先自加
}

void test32_2()
{
    cout << "test32_2= " << ++aa << endl;
}

void test32_main1()
{
    aa = 10;
    test32_1();
    test32_2();
}

void test32_static()
{
    int a = 10;
    static int b = 10;
    cout << "test32_static a =" << a++ << endl;
    cout << "test32_static b =" << b++ << endl;
}
void test32_main2()
{
    void test32_static();
    void test32_static();
    void test32_static();
}

/* 33 函数参数的传递
调用函数的时候，调用者把数值赋给了函数的参数。
实参：调用者程序中书写的在函数名括号中的参数，可以是常量、变量和表达式。
形参：函数的参数列表。

实参 ！= 形参
子函数（形参）的值修改并不会影响实参的值



*/

void func33(int no, string str);
void func33(int no, string str)
{
    no = 5;
    str = "change";
    cout << "形参No is " << no << ":" << str << endl;
}
void test33_main()
{
    int no = 3;
    string message = "Hi";
    func33(no, message);                                   // 括号里面是实参
    cout << "实参 No is " << no << ":" << message << endl; // 实参值并没有改变
}

/* 35 函数的分文件编写
头文件（*.h）：需要包含的头文件，声明全局变量，函数的声明，数据结构和类的声明等。
源文件（*.cpp）：函数的定义、类的定义。
主程序：main函数，程序的核心流程，需要用#include "头文件名"把头文件包含进来。

Windows是集成开发环境，不需要写编译指令。
在Linux系统下，把全部的源文件一起编译，如：g++ -o demo demo.cpp tools.cpp girls.cpp

*/

/* 36 VS 中调试程序

F9设置/取消断点。
F5/F10开始调试。
Shift+F5放弃调试。
F10逐过程执行。
F11逐语句执行（可进入函数内部）。
局部变量窗口显示了变量的值，也可以修改。

*/

/* 37 函数递归
一个函数可以调用另一个函数，作为特例，如果函数调用了自己，就像故事中提到了同样的故事一样，我们把函数在运行时调用自己的情况叫做递归。
递归函数中一定要有递归终止的条件，否则是死递归。

*/

int test37(int x)
{
    if (x == 0)
        return 0;

    return x + test37(x - 1);
}

void test37_main()
{
    cout << "test37 = " << test37(5);
}

int main()
{
    // test32_main2();
    // test33_main();
    test37_main();
}
